#!/usr/bin/env python
"""
È°πÁõÆÁªèÁêÜËßíËâ≤ - ‰ªªÂä°ËßÑÂàíÂíåË∞ÉÂ∫¶
"""
from pydantic import BaseModel
from metagpt.roles import Role
from metagpt.schema import Message
from metagpt.logs import logger

from backend.actions.project_manager_action import CreateTaskPlan, TaskPlan
from backend.actions.architect_content_action import ReportStructure, DesignReportStructureOnly as ArchitectAction


class ReportStructureProxy(BaseModel):
    title: str
    sections: list[dict]


class ProjectManager(Role):
    """
    È°πÁõÆÁªèÁêÜ - Á∫ØÁ≤πÁöÑ‰ªªÂä°Ë∞ÉÂ∫¶ËÄÖ (SOPÁ¨¨‰∏âÈò∂ÊÆµ)
    """
    name: str = "È°πÁõÆÁªèÁêÜ"
    profile: str = "Project Manager"
    goal: str = "Â∞ÜÊä•ÂëäÁªìÊûÑÂàÜËß£‰∏∫ÂÖ∑‰ΩìÁöÑÂÜô‰Ωú‰ªªÂä°"
    constraints: str = "ÂøÖÈ°ªÁ°Æ‰øù‰ªªÂä°ÂàÜËß£ÂêàÁêÜÔºå‰æø‰∫éWriterExpertÊâßË°å"

    def __init__(self, **kwargs):
        super().__init__()
        
        # ËÆæÁΩÆË¶ÅÊâßË°åÁöÑAction
        self.set_actions([CreateTaskPlan])
        
        # ÁõëÂê¨ArchitectÁöÑÊä•ÂëäÁªìÊûÑËæìÂá∫
        self._watch([ArchitectAction])

    async def _act(self) -> Message:
        """
        ÊâßË°åProjectManagerÁöÑÊ†∏ÂøÉÈÄªËæë - SOPÁ¨¨‰∏âÈò∂ÊÆµ
        """
        todo = self.rc.todo
        
        if isinstance(todo, CreateTaskPlan):
            # ‰ªéËÆ∞ÂøÜ‰∏≠Ëé∑ÂèñÊä•ÂëäÁªìÊûÑÊ∂àÊÅØ
            structure_msgs = self.rc.memory.get_by_action(ArchitectAction)
            if not structure_msgs:
                logger.error("Êú™ÊâæÂà∞Êä•ÂëäÁªìÊûÑÊï∞ÊçÆ")
                return Message(content="Êú™ÊâæÂà∞Êä•ÂëäÁªìÊûÑÊï∞ÊçÆ", role=self.profile)
            structure_msg = structure_msgs[-1]
            logger.info(f"üìã Êé•Êî∂Âà∞Êû∂ÊûÑÂ∏àÊ∂àÊÅØ: {structure_msg.content}")

            # ËØªÂèñ Pydantic instruct_content
            instruct_content = structure_msg.instruct_content
            structure_file_path = getattr(instruct_content, "structure_file_path", "") if instruct_content else ""
            if not structure_file_path:
                logger.error("Áº∫Â∞ëÁªìÊûÑÊñá‰ª∂Ë∑ØÂæÑ structure_file_path")
                return Message(content="Áº∫Â∞ëÁªìÊûÑÊñá‰ª∂Ë∑ØÂæÑ", role=self.profile)

            # ËØªÂèñÂπ∂Ëß£Êûê report_structure.md -> ÊûÑÈÄ† ReportStructure ‰ª£ÁêÜ
            try:
                from pathlib import Path
                import re
                text = Path(structure_file_path).read_text(encoding="utf-8")
                blocks = re.split(r"^###\s+\d+\.\s+", text, flags=re.MULTILINE)
                titles = re.findall(r"^###\s+\d+\.\s+(.*)$", text, flags=re.MULTILINE)
                sections = []
                for idx, title in enumerate(titles, 1):
                    guidance = blocks[idx] if idx < len(blocks) else ""
                    sections.append({
                        "section_title": title.strip(),
                        "description_prompt": guidance.strip(),
                    })
                rs_proxy = ReportStructureProxy(title="Áª©ÊïàËØÑ‰ª∑Êä•Âëä", sections=sections)
                logger.info(f"‚úÖ Ëß£Êûê report_structure.md ÊàêÂäüÔºåÁ´†ËäÇÊï∞: {len(sections)}")
            except Exception as e:
                logger.error(f"Ëß£Êûê report_structure.md Â§±Ë¥•: {e}")
                return Message(content=f"Ëß£ÊûêÊä•ÂëäÁªìÊûÑÂ§±Ë¥•: {e}", role=self.profile)

            # ÊûÑÈÄ†ÊàêÁúüÂÆû ReportStructureÔºà‰ΩøÁî®ÂéüÊ®°ÂûãÂ≠óÊÆµÔºâ
            try:
                from backend.actions.architect_content_action import Section
                rs = ReportStructure(title=rs_proxy.title, sections=[
                    Section(section_title=s["section_title"], description_prompt=s["description_prompt"]) for s in rs_proxy.sections
                ])
            except Exception as e:
                logger.error(f"ÊûÑÈÄ† ReportStructure Â§±Ë¥•: {e}")
                return Message(content=f"ÊûÑÈÄ†Êä•ÂëäÁªìÊûÑÂ§±Ë¥•: {e}", role=self.profile)

            # ÊâßË°å‰ªªÂä°ËÆ°ÂàíÂàõÂª∫
            task_plan = await todo.run(rs)
            msg = Message(
                content=f"‰ªªÂä°ËÆ°ÂàíÂàõÂª∫ÂÆåÊàêÔºåÂÖ±{len(task_plan.tasks)}‰∏™‰ªªÂä°",
                role=self.profile,
                cause_by=type(todo),
                instruct_content=task_plan
            )
            logger.info(f"ProjectManagerÂÆåÊàê‰ªªÂä°ËßÑÂàíÔºå‰ªªÂä°Êï∞Èáè: {len(task_plan.tasks)}")
            return msg
        
        return Message(content="ProjectManager: Êó†ÂæÖÂäû‰ªªÂä°", role=self.profile)